{"mappings":"YAAA,IAGMA,EAAiBC,SAASC,cAAc,SACxCC,EAAeF,SAASG,eAAe,iBAInCD,EAAaD,cAAc,gBAC5BC,EAAaD,cAAc,aAC5BC,EAAaD,cAAc,cACrBC,EAAaD,cAAc,wBAC9BC,EAAaD,cAAc,iBAC3BC,EAAaD,cAAc,iBAC5BC,EAAaD,cAAc,gBACzBC,EAAaD,cAAc,kBAC1BC,EAAaD,cAAc,mBAChCC,EAAaD,cAAc,cAkBnC,IAAMG,EAfN,SAA4BC,GAC1B,OAAQA,GACN,IAAK,SACH,MAAO,cACT,IAAK,QACH,MAAO,WACT,IAAK,OACH,MAAO,YACT,IAAK,aACH,MAAO,sBACT,QACE,MAAO,e,CAIWC,CA9BC,UA+BNN,SAASC,cAAc,SAC1BD,SAASC,cAAc,aA+CvCM,MACE,sDAAoEC,OApFzD,QAoFgD,WAAgBA,OArF9D,mCAqF8D,kBAE1EC,MAAK,SAAAC,G,OAAYA,EAASC,M,IAC1BF,MAAK,SAAAG,GACmBA,EAAWC,KAAKC,MAAM,EAAG,GAEjCC,SAAQ,SAAAC,GACrB,IApDJC,EACAC,EACAC,EACAC,EACAC,EAEMC,EA8CIC,EAAO,IAAIC,KAAmB,IAAdR,EAASS,IACzBC,EAAOH,EAAKI,WACZC,EAAUL,EAAKM,aAEfC,EAAW,GAAuCtB,OAApCkB,EAAKK,WAAWC,SAAS,EAAG,KAAK,KAEjCxB,OAFoCoB,EACrDG,WACAC,SAAS,EAAG,MAETC,EAAkB,GAAkCzB,OAA/B0B,KAAKC,MAAMnB,EAASoB,KAAKC,MAAM,MACpDC,EAAqB,GAEzB9B,QAtBkB,gBAqBlBQ,EAASoB,KAAKG,UArBsBC,QAAQ,GAsB5C,OACIC,EAAe,GAA0BjC,OAAvBQ,EAASoB,KAAKhB,SAAS,MACzCsB,EAAgB,GAAuBlC,OAApBQ,EAAS2B,KAAKC,MAAM,QAEvCC,GAnEV5B,EAoEMa,EAnENZ,EAoEMe,EAnENd,EAoEMmB,EAnENlB,EAoEMqB,EAnENpB,EAoEMqB,GAlEApB,EAAOtB,SAAS8C,cAAc,QAC/BC,UAAUC,IAAI,gBACnB1B,EAAK2B,UAAY,qFAIGzC,OAFsBS,EAAK,4EAILT,OAFtBJ,EAAgB,sEASUI,OAPJU,EAAY,4QAaRV,OANAW,EAAe,kOAYfX,OANAY,EAAS,0NAMCZ,OAAVa,EAAU,sCAIjDC,GAqCHvB,EAAemD,YAAYL,E,OAG9BM,OAAM,SAAAC,GACLC,QAAQD,MAAM,sDAAuDA,E","sources":["src/hourly_florin.js"],"sourcesContent":["const apiKey = '07aed853a2b3116bf7e19dfeee63b968';\nconst city = 'Paris';\n\nconst cardsContainer = document.querySelector('.days');\nconst svgContainer = document.getElementById('svg-container');\nconst weatherCondition = 'Clouds';\n\nconst icons = {\n  Clouds: svgContainer.querySelector('#icon-cloudy'),\n  Clear: svgContainer.querySelector('#icon-sun'),\n  Snow: svgContainer.querySelector('#icon-snow'),\n  Clouds_sun: svgContainer.querySelector('#icon-clouds-and-sun'),\n  Weather: svgContainer.querySelector('#icon-weather'),\n  sunrise: svgContainer.querySelector('#icon-sunrise'),\n  sunset: svgContainer.querySelector('#icon-sunset'),\n  humidity: svgContainer.querySelector('#icon-humidity'),\n  barometer: svgContainer.querySelector('#icon-barometer'),\n  wind: svgContainer.querySelector('#icon-wind'),\n};\n\nfunction getWeatherIconName(weatherCondition) {\n  switch (weatherCondition) {\n    case 'Clouds':\n      return 'icon-cloudy';\n    case 'Clear':\n      return 'icon-sun';\n    case 'Snow':\n      return 'icon-snow';\n    case 'Clouds_sun':\n      return 'icon-clouds-and-sun';\n    default:\n      return 'icon-weather';\n  }\n}\n\nconst weatherIconName = getWeatherIconName(weatherCondition);\nconst daySection = document.querySelector('.days');\nconst moreBtn = document.querySelector('.more-btn');\n\nfunction createWeatherCard(\n  time,\n  temperature,\n  pressureInMmHg,\n  humidity,\n  windSpeed\n) {\n  const card = document.createElement('div');\n  card.classList.add('weather-card');\n  card.innerHTML = `\n    <div class=\"weather-card__time\">\n      <h2 class=\"weather-card__time-hour\">${time}</h2>\n      <svg class=\"weather-card__time-icon\">\n        <use href=\"#${weatherIconName}\"></use>\n      </svg>\n      <h1 class=\"weather-card__time-temp\">${temperature}</h1>\n    </div>\n    <div class=\"weather-card__details\">\n      <div class=\"weather-card__barometer\">\n        <svg class=\"weather-card__details-icons\">\n          <use href=\"#icon-barometer\"></use>\n        </svg>\n        <p class=\"weather-card__details-text\">${pressureInMmHg}</p>\n      </div>\n      <div class=\"weather-card__humidity\">\n        <svg class=\"weather-card__details-icons\">\n          <use href=\"#icon-humidity\"></use>\n        </svg>\n        <p class=\"weather-card__details-text\">${humidity}</p>\n      </div>\n      <div class=\"weather-card__wind\">\n        <svg class=\"weather-card__details-icons\">\n          <use href=\"#icon-wind\"></use>\n        </svg>\n        <p class=\"weather-card__details-text\">${windSpeed}</p>\n      </div>\n    </div>\n  `;\n  return card;\n}\n\nfunction convertPressureToMmHg(pressureInhPa) {\n  return (pressureInhPa * 0.75006375541921).toFixed(2);\n}\n\nfetch(\n  `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`\n)\n  .then(response => response.json())\n  .then(hourlyData => {\n    const next7HoursData = hourlyData.list.slice(0, 7);\n\n    next7HoursData.forEach(hourData => {\n      const date = new Date(hourData.dt * 1000);\n      const hour = date.getHours();\n      const minutes = date.getMinutes();\n\n      const hourTime = `${hour.toString().padStart(2, '0')}:${minutes\n        .toString()\n        .padStart(2, '0')}`;\n\n      const hourTemperature = `${Math.round(hourData.main.temp)}°C`;\n      const hourPressureInMmHg = `${convertPressureToMmHg(\n        hourData.main.pressure\n      )} mm`;\n      const hourHumidity = `${hourData.main.humidity} %`;\n      const hourWindSpeed = `${hourData.wind.speed} m/s`;\n\n      const hourCard = createWeatherCard(\n        hourTime,\n        hourTemperature,\n        hourPressureInMmHg,\n        hourHumidity,\n        hourWindSpeed\n      );\n      cardsContainer.appendChild(hourCard);\n    });\n  })\n  .catch(error => {\n    console.error('Eroare la obținerea datelor pentru orele următoare:', error);\n  });\n"],"names":["$ea5c5bc3c8e3d195$var$cardsContainer","document","querySelector","$ea5c5bc3c8e3d195$var$svgContainer","getElementById","$ea5c5bc3c8e3d195$var$weatherIconName","weatherCondition1","$ea5c5bc3c8e3d195$var$getWeatherIconName","fetch","concat","then","response","json","hourlyData","list","slice","forEach","hourData","time","temperature","pressureInMmHg","humidity","windSpeed","card","date","Date","dt","hour","getHours","minutes","getMinutes","hourTime","toString","padStart","hourTemperature","Math","round","main","temp","hourPressureInMmHg","pressure","toFixed","hourHumidity","hourWindSpeed","wind","speed","hourCard","createElement","classList","add","innerHTML","appendChild","catch","error","console"],"version":3,"file":"index.bacb3969.js.map"}